#include <iostream>#include <vector>#include <string>#include <sstream>#include <stdlib.h>#include <unistd.h>using namespace std;const string Commands[] = {"mkdir","cd","chmod","rmdir","rm","cat","ln","ps","kill","uname"};const int Commands_size = 10;char path[FILENAME_MAX];vector<string> split(string,char);int verify_Commands(string);void mkdir(vector<string>);void cd(vector<string>);void chmod(vector<string>);void rmdir(vector<string>);void rm(vector<string>);void cat(vector<string>);void ln(vector<string>);void ps(vector<string>);void kill(vector<string>);void uname(vector<string>);int main(int argc, char const *argv[]){	getcwd(path,sizeof(path));//get the path object from current path	while(true){		char commandLine[256];		cout << "mi_sh> ";	    cin.getline(commandLine,256);	    vector<string> command = split(commandLine,' ');	    if( command.size() == 0 ){	    	cout << "empty input" << endl;	    	continue;	    }	    if( find(command.begin(), command.end(), ">" ) != command.end())	    {	    	cout << "hi there " << endl;	    }else if (find(command.begin(), command.end(), "<") != command.end()){	    }else if(find(command.begin(), command.end(), ">&") != command.end()){ 	    }else if(find(command.begin(), command.end(), ">>") != command.end()){	    }else {	    	int index = verify_Commands(command[0]);	    	//cout << "index" << index << endl;	    	if(index != -1)	    	{	    		if( Commands[index] == "mkdir" )	    			mkdir(command);	    		else if (Commands[index] == "cd" )	    			cd(command);	    		else if (Commands[index] == "chmod")	    			chmod(command);	    		else if (Commands[index] == "rmdir")	    			rmdir(command);	    		else if (Commands[index] == "rm")	    			rm(command);	    		else if (Commands[index] == "cat")	    			cat(command);	    		else if (Commands[index] == "ln")	    			ln(command);	    		else if (Commands[index] == "ps")	    			ps(command);	    		else if (Commands[index] == "kill")	    			kill(command);	    		else if (Commands[index] == "uname")	    			uname(command);	    		else 	    			cout << "something must be wrong" << endl;	    	}else if (index == -1)	    			cout << "Command not found" << endl;	    }	}	return 0;}void cd(vector<string>){ cout << "cd" << endl; }void chmod(vector<string>){cout << "chmod" << endl; }void rm(vector<string>){cout << "rm" << endl; }void cat(vector<string>){cout << "cat" << endl; }void ln(vector<string>){cout << "ln" << endl; }void ps(vector<string>){cout << "ps" << endl; }void kill(vector<string>){cout << "kill" << endl; }void uname(vector<string>){cout << "uname" << endl; }/*	dividimos el comando entrante */vector<string> split(string str, char delimiter) {	vector<string> internal;	stringstream ss(str); 	string tok;	while(getline(ss, tok, delimiter)) {		internal.push_back(tok);	}	return internal;}/*	verificamos si el comando existe*/int verify_Commands(string command){	for ( int i = 0; i < Commands_size; i++)	{		if ( command == Commands[i])			return i;	}	return -1;}/*	mkdir*/void mkdir(vector<string> command ){		if(command.size() == 2 )	{		char *argv[] = {(char *)command[1].c_str(), (char *)0};		if( !fork() )		{			string TO_EXEC_COMMAND = path;			TO_EXEC_COMMAND += "/mkdir";			execv(TO_EXEC_COMMAND.c_str(), argv);		}	}}void rmdir(vector<string> command){	if(command.size() == 2)	{		char *argv[] = {(char *)command[1].c_str(), (char *)0};		if( !fork() )		{ 			string TO_EXEC_COMMAND = path;			TO_EXEC_COMMAND += "/rmdir";			execv(TO_EXEC_COMMAND.c_str(), argv);		}	}else if (command.size() == 3)	{		if(command[1] == "-r" || command[1] == "-R")		{			char *argv[] = {(char *)command[2].c_str(), (char *)0};			if( !fork() )			{				string TO_EXEC_COMMAND = path;				TO_EXEC_COMMAND += "/rmdirR";				execv(TO_EXEC_COMMAND.c_str(), argv);			}		}	}}